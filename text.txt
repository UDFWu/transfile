pipeline {
  agent any
  environment {
    IQ_URL   = 'https://iq.example.com'
    IQ_CREDS = 'iq-server-creds'         // Jenkins Credentials（帳密或 token）
  }
  stages {
    stage('IQ Evaluate (Develop/Build/Release 任選)') {
      steps {
        script {
          def iq = null
          // 1) 接住失敗：不讓步驟立刻終止，先拿到回傳的 URLs
          catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
            iq = nexusPolicyEvaluation(
              iqApplication: 'your-app-id-or-name',
              iqStage: 'build',                    // develop / build / release
              iqScanPatterns: [[scanPattern: 'pom.xml']],
              failBuildOnNetworkError: true        // 網路錯誤也算失敗
            )
          }

          // 2) 嘗試下載「原始 JSON」或至少留下報告連結
          withCredentials([usernamePassword(credentialsId: IQ_CREDS,
                                            usernameVariable: 'IQ_USER',
                                            passwordVariable: 'IQ_PASS')]) {
            sh """
              rm -rf iq-report || true
              mkdir -p iq-report
              # 若外掛有給 rawResultsUrl，下載 JSON
              if [ ! -z "${iq?.rawResultsUrl}" ]; then
                curl -sS -u "$IQ_USER:$IQ_PASS" "${iq.rawResultsUrl}" -o iq-report/iq-report.json || true
              fi
              # 永遠至少留一個可點的 URL 檔（沒有就空）
              echo "${iq?.applicationReportUrl ?: iq?.applicationCompositionReportUrl ?: ''}" > iq-report/iq-report.url
            """
          }

          // 3) 歸檔（就算空也允許）
          archiveArtifacts artifacts: 'iq-report/**', allowEmptyArchive: true, onlyIfSuccessful: false

          // 4) 決定是否讓建置失敗（中斷）
          // 常見回傳：policyAction = "Failure"/"Warning"/"None"（依外掛版本）
          if (iq == null || "${iq?.policyAction}".toLowerCase().contains('fail') ) {
            error "Failing build due to IQ policy violations (or evaluation error)."
          }
        }
      }
    }
  }
  post {
    always {
      echo "Pipeline finished (report archived if available)."
    }
  }
}
