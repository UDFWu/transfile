pipeline {
    agent any
    
    environment {
        CX_URL = 'http://10.10.2.164'  // Checkmarx URL
        CX_CREDENTIALS_ID = 'checkmarx-server'  // 你在 Jenkins 中設置的憑證 ID
        PROJECT_NAME = 'atms' //設定Checkmarx上對應的專案名稱
        TEAM_NAME = 'CxServer\\SP\\SCSB\\planning' //預設小組名稱
    }
            
    stages {
        stage('Checkout') {
            steps {
                // 從 GitLab 檢出專案
                checkout([$class: 'GitSCM', 
                    branches: [[name: '*/main']], 
                    userRemoteConfigs: [[
                        url: 'https://10.10.32.10/auto_test/atms.git',
                        credentialsId: 'south-gitlab-root-user'
                    ]]
                ])
            }
        }

        stage('Checkmarx scan') {
            steps {
                script {
                    try {
                        step([$class: 'CxScanBuilder', comment: '', credentialsId: 'checkmarx-server', 
                        excludeFolders: '', 
                        excludeOpenSourceFolders: '', 
                        exclusionsSetting: 'global', 
                        //failBuildOnNewResults: false, 
                        //failBuildOnNewSeverity: 'HIGH',
                        highThreshold: 0,
                        mediumThreshold: 0,
                        lowThreshold: 100,
                        vulnerabilityThresholdResult: 'FAILURE', //設定pipeline偵測到超過閥值時失敗
                        waitForResultsEnabled: true, //等待掃描結果回傳
                        vulnerabilityThresholdEnabled: true, //設定風險閥值開啟
                        fullScanCycle: 10, generatePdfReport: true, generateXmlReport: false, groupId: '6', includeOpenSourceFolders: '', 
                        osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz', osaInstallBeforeScan: false, 
                        password: '{AQAAABAAAAAQax2RkWSCqvL7HG7i/JVm9LIimk2n+Nxi2QfY9WGoPX0=}', preset: '36', projectName: 'Test Folder', 
                        sastEnabled: true, serverUrl: 'http://10.10.2.164/', sourceEncoding: '1', username: '', 
                        filterPattern: '''!**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*,
                        !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,
                        !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
                        !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
                        !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
                        !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
                        !**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
                        !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
                        !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
                        !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
                        !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*'''
                        ])
                        
                        // 取得掃描結果並進行判斷
                        if (scanResults.hasHighVulnerability || scanResults.hasMediumVulnerability) {
                            currentBuild.result = 'FAILURE'
                            error("Security scan failed: Found High/Medium risk vulnerabilities")
                        }
                    } catch (Exception e) {
                        currentBuild.result = 'FAILURE'
                        error("Checkmarx scan failed: ${e.message}")
                    }
                }
                
            }
        }
        
        stage('Dependency Check') {
            steps {
                // 執行 Dependency Check
                dependencyCheck additionalArguments: '--data /opt/dependency-check/data -f HTML JSON --noupdate --disableNodeAudit --disableCentral --disableOssIndex', nvdCredentialsId: 'NVD-API-KEY', odcInstallation: 'owasp_check'
            }
        }
        
    }

    post {
        always {
            // 歸檔報告
            archiveArtifacts artifacts: '**/dependency-check-report.html, **/checkmarx-report.pdf', allowEmptyArchive: true
        }
    }
}