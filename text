pipeline {
    agent any
    tools{
        jdk 'Java 17'
    }
    environment {
		GIT_REPO_URL = 'https://ddpsg01.cbsd.scsb.com.tw/ncbs_ach/ach-apic-gateway.git'
        GIT_REPO_SSH_URL = 'git@ddpsg01.cbsd.scsb.com.tw:ncbs_ach/ach-apic-gateway.git'
        NEXUS_URL = 'https://ddpsn01.cbsd.scsb.com.tw'
		SONAR_PROJECT_KEY = 'ncbs-ach'
		PROJECT_NAME='scsb-ach-apic-gateway'
        RELEASE_TAG = ''
        RELEASE_TIMESTAMP = ''
        RELEASE_VERSION = ''
        APP_VERSION = '1.0.0'
        BATCH_SERVER = '10.21.109.220'
        CICDAPISERVICE_URL = 'http://ddpsg01.cbsd.scsb.com.tw:5001'
		CURRENT_DATE = ''
    }
    stages {
		stage('check env') {
			steps {
				echo 'check env'
				echo '------------------------------'
				sh 'pwd'
				echo '------------------------------'
				sh 'ls -al'
				echo '------------------------------'
				echo sh(script: 'env|sort', returnStdout: true)
				echo '------------------------------'
				sh 'java -version'
				echo '------------------------------'
				sh 'mvn -version'
				echo '------------------------------'
				sh 'git --version'
				echo '------------------------------'
				sh 'df -h' //Show Disk space
				echo '------------------------------'
			}
			post {
				failure {
					echo 'check env 失敗'
				}
				success {
					echo 'check env 成功'            	
				}
			}
		}
		stage('WORKSPACE init') {
			steps {
				echo 'WORKSPACE init'
				echo '------------------------------'
				sh 'rm -rf *'
				echo '------------------------------'
				sh 'ls -al'
				echo '------------------------------'
			}
			post {
				failure {
					echo 'WORKSPACE init 失敗'
				}
				success {
					echo 'WORKSPACE init 成功'            	
				}
			}
		}
		
		stage('git clone'){
		    steps{
				echo 'git clone'
				echo '------------------------------'
				withCredentials([gitUsernamePassword(credentialsId: 'gitlab-user',gitToolName: 'git-tool')]) {
					sh '''
						git clone --branch dev ${GIT_REPO_SSH_URL}
						ls -al
						pwd
					'''
				}
		    }
		    post{
				failure {
					echo 'git clone 失敗'
				}
				success {
					echo 'git clone 成功'            	
				} 
		    }
		}
		
		stage('maven package'){
		    steps{
		        echo 'maven package'
		        echo '------------------------------'
		        
		        sh '''
		            cd ach-apic-gateway
		            pwd
		            mvn clean
		            mvn package
				'''
				echo '------------------------------'
		    }
		    post{
		       failure {
					echo 'maven package 失敗'
				}
				success {
					echo 'maven package 成功'
				} 
		    }
		}
		
		stage('Publish to nexus(spring)') { 
			steps {
				updateGitlabCommitStatus name: 'Publish to nexus(spring)', state: 'pending'
				dir("ach-apic-gateway"){
									script {
						pom = readMavenPom file: "pom.xml";
						filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
						echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
						artifactPath = filesByGlob[0].path;
						artifactExists = fileExists artifactPath;
						if(artifactExists) {
							echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
							nexusArtifactUploader(
								credentialsId: 'nexus-user',
								nexusUrl: 'ddpsn01.cbsd.scsb.com.tw',
								nexusVersion: 'nexus3',
								protocol: 'https',
								repository: 'maven-releases',
								groupId: pom.groupId,
								version: pom.version,
								artifacts: [
									[
										artifactId: pom.artifactId,
										classifier: '',
										file: artifactPath,
										type: pom.packaging
									],
									[
										artifactId: pom.artifactId,
										classifier: '',
										file: "pom.xml",
										type: "pom"
									]
								]
							);
						} else {
							error "*** File: ${artifactPath}, could not be found";
						}
					}
				}
				updateGitlabCommitStatus name: 'Publish to nexus(spring)', state: 'success'
			}
		}
		
		stage('Download WAR from Nexus on Target Server') {
            steps {
                echo 'Starting download on target server dacha01'
                echo '------------------------------'
                script {
                    // 使用 Jenkins 憑證來隱藏 Nexus 認證資訊
                    withCredentials([usernamePassword(credentialsId: 'nexus-user', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                        sh '''
							CURRENT_DATE=$(date "+%Y-%m-%d")
							echo "process execution date: ${CURRENT_DATE}"
                            ssh -i /var/lib/jenkins/.ssh/jenkinsAgent_rsa dacha01@10.21.106.160 <<EOF
                                cd /home/dacha01
								mkdir -p /home/dacha01/deploy/${CURRENT_DATE}
								pwd
								cd deploy/${CURRENT_DATE}
                                wget --user=${NEXUS_USER} --password=${NEXUS_PASS} --no-check-certificate https://ddpsn01.cbsd.scsb.com.tw/repository/maven-releases/com/pershing/scsb-ach-apic-gateway/1.0/scsb-ach-apic-gateway-1.0.war -O apicGw.war
                                ls -al apicGw.war
                                exit
                            EOF
                        '''
                    }
                }
                echo '------------------------------'
            }
            post {
                failure {
                    echo 'Download failed on target server'
                }
                success {
                    echo 'Download succeeded on target server'
                }
            }
        }
		
		stage('deploy and restart application'){
			steps{
				echo 'stop apicGw'
				sh '''
				    CURRENT_DATE=$(date "+%Y-%m-%d")
					ssh -i /var/lib/jenkins/.ssh/jenkinsAgent_rsa dacha01@10.21.106.160 <<EOF
					    cd /ctl/ach/jboss-eap-8.0/bin/cicd
					    sh apicGw_version_upgrade.sh "${CURRENT_DATE}"
					    exit
					EOF
				'''
			}
			
			post{
		       failure {
					echo '換版 失敗'
				}
				success {
					echo '換版 成功'            	
				} 
		    }
		}
    }
}
