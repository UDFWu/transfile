[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (Check Tag)
[Pipeline] script
[Pipeline] {
[Pipeline] withCredentials
Masking supported pattern matches of $GIT_PASSWORD
[Pipeline] {
[Pipeline] sh
Warning: A secret was passed to "sh" using Groovy String interpolation, which is insecure.
		 Affected argument(s) used the following variable(s): [GIT_PASSWORD]
		 See https://jenkins.io/redirect/groovy-string-interpolation for details.
+ git -c http.sslVerify=false ls-remote --tags https://jenkins:****@ddpsg01.cbsd.scsb.com.tw/ncbs_ctm/ctm.git
[Pipeline] echo
6d928aaba76c706ccea638c7eaf913907f36ed21	refs/tags/v20240320.001
cad53959f51a8190a7d242c8e6d38464d6c7b80b	refs/tags/v20240328.001
a830714fe8b708a8faeb4309017447ffdc19974b	refs/tags/v20240328.001^{}
[Pipeline] input
Are you sure to deploy v20240328.001 version?
Proceed or Abort
Approved by 吳宗樺



stage('Check Tag') { // for display purposes
			steps {
		        script {
    	            //withCredentials([usernamePassword(credentialsId: 'fepgitlab', passwordVariable: 'ppass', usernameVariable: 'uname')]){
                    //withCredentials([usernamePassword(credentialsId: 'gitlab-user', passwordVariable: 'ppass', usernameVariable: 'nbawovenboxer951951')]){
                    withCredentials([usernamePassword(credentialsId: 'gitlab-user', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                        //def check_tag = sh(script: "git -c http.sslVerify=false ls-remote --tags https://${uname}:${ppass}@${GIT_REPO_URL}.git", returnStdout: true).trim()
    	                //def check_tag = sh(script: "git -c http.sslVerify=false ls-remote --tags https://${selectedUsername}:${selectedPassword}@${git_repo_department_url}.git", returnStdout: true).trim()
    	                //def check_tag = sh(script: "git -c http.sslVerify=false ls-remote --tags https://${nbawovenboxer951951}:${ppass}@ddpsg01.cbsd.scsb.com.tw/ncbs_ctm/ctm.git", returnStdout: true).trim()
                        def check_tag = sh(script: "git -c http.sslVerify=false ls-remote --tags https://${GIT_USERNAME}:${GIT_PASSWORD}@ddpsg01.cbsd.scsb.com.tw/ncbs_ctm/ctm.git", returnStdout: true).trim()
                        
                        if (!env.Tag) {
    						error("*** Build failed, Tag can't no be empty.")
    					} else if (!check_tag) {
    						error('*** Tag does not exist.')
    					} else {
    					    echo "${check_tag}"
    						env.APP_VERSION = env.Tag
    						input "Are you sure to deploy ${env.Tag} version?"
    					}
    					//sh 'git checkout SIT_PHASE1'
    					//sh 'git ls-remote --tags https://${uname}:${ppass}@${GIT_REPO_URL}'
    					//env.GIT_PREVIOUS_COMMIT = sh(script: "git rev-parse SIT_PHASE1", returnStdout: true).trim()
    					//env.GIT_COMMIT = sh(script: "git -c http.sslVerify=false ls-remote --tags  https://${uname}:${ppass}@${GIT_REPO_URL}.git | grep ${env.Tag} | awk '{print \$1}'", returnStdout: true).trim()
    					//env.GIT_COMMIT = sh(script: "git -c http.sslVerify=false ls-remote --tags  https://${selectedUsername}:${selectedPassword}@${git_repo_department_url}.git | grep ${env.Tag} | awk '{print \$1}'", returnStdout: true).trim()
                        env.GIT_COMMIT = sh(script: "git -c http.sslVerify=false ls-remote --tags  https://${nbawovenboxer951951}:${ppass}@ddpsg01.cbsd.scsb.com.tw/ncbs_ctm/ctm.git | grep ${env.Tag} | awk '{print \$1}'", returnStdout: true).trim()
                        
                        //if (!env.GIT_PREVIOUS_COMMIT){
    					//	env.GIT_PREVIOUS_COMMIT = env.GIT_COMMIT
    					//}
    					echo "${env.GIT_COMMIT}"
    
    					//sh(script: "echo do Declarative: Checkout SCM", returnStdout: false)
    
    					//checkout([$class: 'GitSCM',
    					//	branches: [[name: "${env.GIT_COMMIT}"]],
    					//	userRemoteConfigs: [[url: "https://${GIT_REPO_URL}", credentialsId: 'fepgitlab']]
    					//])
    					//env.GIT_COMMIT_SHORT = sh(script: "git rev-parse --short ${GIT_COMMIT}", returnStdout: true).trim()
    					//sh 'git clone --branch ${env.tag} https://${uname}:${ppass}@${GIT_REPO_URL}'
    	            }
				}   
			}
		}